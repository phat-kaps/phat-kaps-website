$grey: (
  'base': #454443
);

$brown: (
  'base': #ae895d,
  'lighten-1': #dbaf75
);

$shades: (
  "black":        #000,
  "white":        #FFF,
  "transparent":  transparent,
  'background': map-get($brown, 'base')
);

$colors: (
  "brown": $brown,
  "shades": $shades,
  "grey": $grey
);

@each $color_name, $color in $colors {
  @each $color_type, $color_value in $color {
    @if $color_type == "base" {
      .u-color-#{$color_name}-bg {
        background-color: $color_value !important;
      }
      .u-color-#{$color_name}-txt {
        color: $color_value !important;
      }
    }
    @else if $color_name != "shades" {
      .u-color-#{$color_name}-bg.#{$color_type} {
        background-color: $color_value !important;
      }
      .u-color-#{$color_name}-txt.#{$color_type} {
        color: $color_value !important;
      }
    }
  }
}

// Shade classes
@each $color, $color_value in $shades {
  .u-color-#{$color}-bg {
    background-color: $color_value !important;
  }
  .u-color-#{$color}-txt {
    color: $color_value !important;
  }
}


// usage: color("name_of_color", "type_of_color")
// to avoid to repeating map-get($colors, ...)

@function color($color, $type) {
  @if map-has-key($colors, $color) {
    $curr_color: map-get($colors, $color);
    @if map-has-key($curr_color, $type) {
      @return map-get($curr_color, $type);
    }
  }
  @warn "Unknown `#{name}` in $colors.";
  @return null;
}
